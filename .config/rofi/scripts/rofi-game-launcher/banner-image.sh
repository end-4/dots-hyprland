#!/usr/bin/env bash

# Generates a banner image for the given Steam appid with the given dimensions

# .bmp format was chosen since it appears to be the most performant format
# for ImageMagick to work with when generating the banner image
#!/usr/bin/env bash

# Generates a banner image for the given Steam appid with the given dimensions

# .bmp format was chosen since it appears to be the most performant format
# for ImageMagick to work with when generating the banner image
EXT="bmp"
CACHE_DIR="/tmp/rofi-game-launcher"
BANNER="$CACHE_DIR/banner.$EXT"
TITLE="$CACHE_DIR/title.png"
STEAM_DIR="$HOME/.local/share/Steam"
mkdir -p "$CACHE_DIR"

# Function to display usage instructions
usage() {
  echo "Generate banner image to be used in the Rofi game menu"
  echo "Usage: $0 -a <APPID> -w <WIDTH> -h <HEIGHT> -b [<BLEND WIDTH>] [-f]"
  echo "  -b: Specify the width in pixels of the section on the edges used to extend the image. Default: 200"
  echo "  -f: Force generation of the banner image even if it exists in the cache"
  exit
}

update-banner() {
  local OPTIND=1
  local appid width height force
  local blend=200

  # Parsing command-line options
  while getopts 'a:w:h:b:f' arg; do
    case ${arg} in
    a) appid=${OPTARG} ;;  # Steam app ID
    w) width=${OPTARG} ;;  # Banner width
    h) height=${OPTARG} ;; # Banner height
    b) blend=${OPTARG} ;;  # Blend width
    f) force=1 ;;          # Force flag
    *) usage ;;
    esac
  done

  # Check if mandatory arguments are provided
  [ -z "$appid" ] && usage
  [ -z "$width" ] && usage
  [ -z "$height" ] && usage

  echo "Generating banner for AppID: $appid with dimensions ${width}x${height}"

  # Set file paths for the library header and title images
  local src=$STEAM_DIR/appcache/librarycache/${appid}/library_hero.jpg
  local title_images=("$STEAM_DIR/appcache/librarycache/${appid}/logo".*)

  # If library header not found in main directory, search subfolders
  if [ ! -f "$src" ]; then
    echo "Library hero image not found in main directory. Searching subfolders..."
    src=$(find "$STEAM_DIR/appcache/librarycache/${appid}" -name "library_hero.jpg" | head -n 1)
  fi
  echo "Using library hero image: $src"

  # If title image not found in main directory, search subfolders for any extension
  if [ ! -z "$title_images" ] || [ ! -z "${title_images[0]}" ]; then
    echo "Title image not found in main directory. Searching subfolders for any extension..."
    title_images=($(find "$STEAM_DIR/appcache/librarycache/${appid}" -type f -name "logo.*"))

  fi
  local title="${title_images[0]}"
  echo "Using title image: $title"

  local out=$CACHE_DIR/$appid/${width}x${height}.$EXT
  mkdir -p "$CACHE_DIR/$appid"

  # Remove existing banner and title files
  if [ -f $BANNER ]; then
    rm $BANNER
  fi
  if [ -f $TITLE ]; then
    rm $TITLE
  fi

  # Generate banner if it doesn't exist or force flag is set
  if [ ! -f "$out" ] || [ -n "$force" ]; then
    echo "Generating new banner image..."
    # Banner image is generated by taking the hero image used by Steam
    # (typically 1920x620) and stretching and blurring the horizontal
    # edges to reach the desired width. The variable blend determines the
    # how much of the edges are used in this operation.
    local gradient=$CACHE_DIR/gradient.$EXT
    local left=$CACHE_DIR/left.$EXT
    local right=$CACHE_DIR/right.$EXT
    local center=$CACHE_DIR/center.$EXT

    # Resize the hero image to the specified dimensions
    magick "$src" -resize "${width}x${height}" "$center"

    # Generate gradient image used for blending the side extensions into
    # the center image and for fading the side images
    magick -size "${height}x${blend}" gradient: -rotate 90 "$gradient"

    local center_width side_width side_blend
    center_width=$(identify -format "%W" "$center")
    side_width=$(((width - center_width + 1) / 2 + blend))
    side_blend=$((side_width / 2))

    # Generate left extension
    magick "$center" -crop "${blend}x${height}+0+0" \
      -resize "${side_width}x${height}!" -blur 0x12 \
      -gravity east \( "$gradient" -rotate 180 \) \
      -compose copyopacity -composite \
      -gravity west \( "$gradient" -resize "${side_blend}x${height}!" \) \
      -compose copyopacity -composite \
      "$left"

    # Generate right extension
    magick "$center" -gravity east -crop "${blend}x${height}+0+0" \
      -resize "${side_width}x${height}!" -blur 0x12 \
      -gravity west "$gradient" \
      -compose copyopacity -composite \
      -gravity east \( "$gradient" -rotate 180 -resize "${side_blend}x${height}!" \) \
      -compose copyopacity -composite \
      "$right"

    # Blend the banner together
    magick \
      \( "$center" -background none -gravity center -extent "${width}x${height}" \) \
      \( "$left" -background none -gravity west -extent "${width}x${height}" \) \
      -compose over -composite \
      \( "$right" -background none -gravity east -extent "${width}x${height}" \) \
      -compose over -composite \
      "$out"
  fi
  ln -s "$out" "$BANNER"
  echo "Banner image generated and linked at $BANNER"

  # Create symbolic link for the title image if it exists
  if [ -f "$title" ]; then
    ln -s "$title" "$TITLE"
    echo "Title image linked at $TITLE"
  else
    echo "Warning: Title image not found for AppID $appid"
  fi
}

update-banner "$@"
